<Page
    x:Class="UlmUniversityNews.Views.Homescreen.Homescreen"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="using:UlmUniversityNews.Views.Homescreen"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:i="using:Microsoft.Xaml.Interactivity"
    xmlns:core="using:Microsoft.Xaml.Interactions.Core"
    xmlns:drawerLayout="using:DrawerLayout"
    xmlns:valueconverter="using:UlmUniversityNews.Converters"
    xmlns:mockData="using:UlmUniversityNews.DataModel"
    xmlns:common="using:UlmUniversityNews.Common"
    mc:Ignorable="d"
    d:DataContext="{Binding Source={d:DesignInstance Type=mockData:MockHomescreenViewModel, IsDesignTimeCreatable=True}}"
    Background="{ThemeResource ApplicationPageBackgroundThemeBrush}">
    <Page.Resources>
        <!-- Konvertierung eines Boolean Wertes auf eine Sichtbarkeit. -->
        <valueconverter:BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
        <!-- Konvertierung eines ItemClickEventArgs auf das geklickte Objekt. -->
        <valueconverter:ItemClickedConverter x:Key="ItemClickedConverter" />
        <!-- Konvertierung auf Sichtbarkeitswert abhängig von der Anzahl an Elementen einer Liste. -->
        <valueconverter:ListCountToVisibilityConverter x:Key="ListCountToVisibilityConverter" />
    </Page.Resources>
    
    <!-- StatusBar -->
    <i:Interaction.Behaviors>
        <common:StatusBarBehavior IsVisible="True"
                                  ForegroundColor="White"
                                  BackgroundColor="Black"
                                  BackgroundOpacity="1.0" />
        <common:ProgressIndicatorBehavior IsVisible="{Binding IsProgressIndicatorVisible, UpdateSourceTrigger=PropertyChanged}"
                                          Value="{Binding ProgressIndicatorProgressValue, UpdateSourceTrigger=PropertyChanged}"
                                          Text="{Binding ProgressIndicatorText, UpdateSourceTrigger=PropertyChanged}"
                                          IsIndeterminate="{Binding IsIndeterminateProgressIndicator, UpdateSourceTrigger=PropertyChanged}" />
    </i:Interaction.Behaviors>
    
    <!-- CommandBar -->
    <Page.BottomAppBar>
        <CommandBar x:Name="HomescreenCommandBar"
                    Foreground="{StaticResource UNUCommandBarButtonColor}"
                    Background="{StaticResource UniUlmMainBackgroundColor}">
            <AppBarButton x:Name="SearchChannels"
                          x:Uid="HomescreenSearchChannelsButton"
                          Icon="Find"
                          Label="search channel"
                          Visibility="{Binding ElementName=SearchChannels, Path=IsEnabled, Converter={StaticResource BooleanToVisibilityConverter}}"
                          Command="{Binding SearchChannelsCommand}" />
            <AppBarButton x:Name="SearchGroups"
                          x:Uid="HomescreenSearchGroupsButton"
                          Icon="Find"
                          Label="search group"
                          Visibility="{Binding ElementName=SearchGroups, Path=IsEnabled, Converter={StaticResource BooleanToVisibilityConverter}}"
                          Command="{Binding SearchGroupsCommand}"/>
            <AppBarButton x:Name="AddGroup"
                          x:Uid="HomescreenAddGroupButton"
                          Icon="Add"
                          Label="add group"
                          Visibility="{Binding ElementName=AddGroup, Path=IsEnabled, Converter={StaticResource BooleanToVisibilityConverter}}"
                          Command="{Binding AddGroupCommand}" />
        </CommandBar>
    </Page.BottomAppBar>
    
    
    <!-- Layout Root -->   
    <Grid x:Name="LayoutRoot">
        <Grid.ChildrenTransitions>
            <TransitionCollection>
                <EntranceThemeTransition/>
            </TransitionCollection>
        </Grid.ChildrenTransitions>

        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>

        <!-- Titelbereich - Drawer -->
        <Grid Grid.Row="0" Style="{StaticResource DrawerMenuTitleBar}">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            
            <!-- Drawer Icon -->
            <Image x:ConnectionId='1' x:Name="DrawerIcon" 
                   Grid.Column="0"
                   Style="{StaticResource DrawerIconStyle}"
                                              />
            
            <!-- Drawer Text -->
            <TextBlock Grid.Column="1"
                       x:Uid="HomescreenTitle"
                       Style="{StaticResource DrawerTextStyle}"
                       Text="Homescreen" />
        </Grid>

        <!--Inhalt der Seite und Inhalt des Drawer Menü-->
        <drawerLayout:DrawerLayout Grid.Row="1" x:Name="DrawerLayout">
            
            <!-- Inhalt der Seite -->
            <Grid x:Name="MainFragment" Background="{StaticResource MainFragmentBackgroundColor}">
                <Pivot x:Uid="HomescreenPivot" 
                       x:Name="HomescreenPivot" 
                       HeaderTemplate="{StaticResource PivotItemHeaderStyle}"
                       SelectedIndex="{Binding SelectedPivotItemIndex, Mode=TwoWay}">
                    <!-- Pivotelement 1-->
                    <PivotItem x:Uid="HomescreenMyChannelsPivotItem"
                           Style="{StaticResource PivotItemStyle}"
                           Header="Meine Kanäle">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="*" />
                            </Grid.RowDefinitions>

                            <TextBlock 
                                Grid.Row="0"
                                x:Uid="HomescreenNoChannelSubscribedInfoText"
                                Style="{StaticResource UniversityNewsUlmStandardText}"
                                Visibility="{Binding ChannelCollection.Count, TargetNullValue='0', FallbackValue='0', Converter={StaticResource ListCountToVisibilityConverter}}">
                                    Es wurde noch kein Kanal abonniert.
                                    <LineBreak/>
                                    Gehen Sie auf die Kanalsuche, um einen Kanal zu abonnieren.
                            </TextBlock>

                            <!-- Definiere Liste für Kanäle. -->
                            <!-- Beachte, IsItemClickEnabled muss explizit aktiviert werden, sonst funktioniert das Binding auf das Command über das Behaviour nicht.-->
                            <ListView
                                Grid.Row="1"
                                ItemTemplate="{StaticResource ChannelListItemStyle}"
                                ItemsSource="{Binding ChannelCollection}"
                                IsItemClickEnabled="True"
                                HorizontalContentAlignment="Stretch"
                                HorizontalAlignment="Stretch">
                                <ListView.ItemContainerStyle>
                                    <Style TargetType="ListViewItem">
                                        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
                                    </Style>
                                </ListView.ItemContainerStyle>

                                <!-- Bind auf Command mittels Behaviour. Event vom Klick auf ein Item wird auf Command abgebildet.-->
                                <i:Interaction.Behaviors>
                                    <core:EventTriggerBehavior EventName="ItemClick">
                                        <core:InvokeCommandAction Command="{Binding ChannelSelected}"
                                                              InputConverter="{StaticResource ItemClickedConverter}" />
                                    </core:EventTriggerBehavior>
                                </i:Interaction.Behaviors>
                            </ListView>

                        </Grid>
                        
                    </PivotItem>
                    
                    <!-- Pivotelement 2-->
                    <PivotItem x:Uid="HomescreenMyGroupsPivotItem"
                           Style="{StaticResource PivotItemStyle}"
                           Header="Meine Gruppen">
                        
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="*" />
                            </Grid.RowDefinitions>

                            <TextBlock 
                                Grid.Row="0"
                                x:Uid="HomescreenNoGroupInfoText"
                                Style="{StaticResource UniversityNewsUlmStandardText}"
                                Visibility="{Binding GroupCollection.Count, TargetNullValue='0', FallbackValue='0', Converter={StaticResource ListCountToVisibilityConverter}}">
                                    Sie sind aktuell in keiner Gruppe eingetragen.
                                    <LineBreak/>
                                    Gehen Sie auf die Gruppensuche, um Teilnehmer einer Gruppe zu werden.
                            </TextBlock>

                            <!-- TODO -->
                            
                        </Grid>
                    </PivotItem>
                </Pivot>
            </Grid>
            
            
             <!--Inhalt des Drawer Menüs-->
            <Grid x:Name="ListFragment" Background="{StaticResource DrawerMenuContentPanelBackgroundColor}">
                <ListView x:Name="ListMenuItems"
                          ItemTemplate="{StaticResource DrawerMenuEntryDataTemplate}"
                          IsItemClickEnabled="True">
                    <ListView.ItemContainerStyle>
                        <Style TargetType="ListViewItem">
                            <Setter Property="HorizontalContentAlignment" Value="Stretch" />
                        </Style>
                    </ListView.ItemContainerStyle>

                    <!-- Bind auf Command mittels Behaviour. Event vom Klick auf ein Item wird auf Command abgebildet.-->
                    <i:Interaction.Behaviors>
                        <core:EventTriggerBehavior EventName="ItemClick">
                            <core:InvokeCommandAction Command="{Binding DrawerButtonCommand}"
                                                              InputConverter="{StaticResource ItemClickedConverter}" />
                        </core:EventTriggerBehavior>
                    </i:Interaction.Behaviors>
                </ListView>
            </Grid>

        </drawerLayout:DrawerLayout>
    </Grid>
</Page>

