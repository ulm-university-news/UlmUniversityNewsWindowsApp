<Page
    x:Class="UlmUniversityNews.Views.ModeratorViews.AddAndEditReminderDialog.AddAndEditReminder"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="using:UlmUniversityNews.Views.ModeratorViews.AddAndEditReminderDialog"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:core="using:Microsoft.Xaml.Interactions.Core"	
	xmlns:i="using:Microsoft.Xaml.Interactivity"
	xmlns:common="using:UlmUniversityNews.Common"
	xmlns:userCtrl="using:UlmUniversityNews.Common.CustomUserControl"
	xmlns:valueconverter="using:UlmUniversityNews.Converters"
	xmlns:drawerLayout="using:DrawerLayout"
    mc:Ignorable="d"
    Background="{ThemeResource ApplicationPageBackgroundThemeBrush}">

    <Page.Resources>
        <!-- Konvertierung eines ItemClickEventArgs auf das geklickte Objekt. -->
        <valueconverter:ItemClickedConverter x:Key="ItemClickedConverter" />
        <valueconverter:StringToVisibilityConverter x:Key="StringToVisibilityConverter" />
        <valueconverter:BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
        <valueconverter:ChannelToDrawerMenuBackgroundConverter x:Key="ChannelToDrawerMenuBackgroundConverter" />
        <valueconverter:ValidationMessageOnLocalizedStringConverter x:Key="ValidationMessageOnLocalizedStringConverter" />
        <valueconverter:ReminderDateTimeToStringConverter x:Key="ReminderDateTimeToStringConverter" />

        <Style x:Name="IntervalBlockFontStyle" 
               x:Key="IntervalBlockFontStyle"
               TargetType="TextBlock">
            <Setter Property="FontFamily" Value="Arial" />
            <Setter Property="FontSize" Value="15" />
        </Style>
    </Page.Resources>

    <!-- StatusBar -->
    <i:Interaction.Behaviors>
        <common:StatusBarBehavior IsVisible="True"
                                  ForegroundColor="White"
                                  BackgroundColor="Black"
                                  BackgroundOpacity="1.0" />
        <common:ProgressIndicatorBehavior IsVisible="{Binding IsProgressIndicatorVisible, UpdateSourceTrigger=PropertyChanged}"
                                          Value="{Binding ProgressIndicatorProgressValue, UpdateSourceTrigger=PropertyChanged}"
                                          Text="{Binding ProgressIndicatorText, UpdateSourceTrigger=PropertyChanged}"
                                          IsIndeterminate="{Binding IsIndeterminateProgressIndicator, UpdateSourceTrigger=PropertyChanged}" />
    </i:Interaction.Behaviors>

    <!-- CommandBar -->
    <Page.BottomAppBar>
        <CommandBar x:Name="AddAndEditReminderCommandBar"
                    Background="{StaticResource UniUlmMainBackgroundColor}">
            <AppBarButton 
                x:Name="AddAndEditReminderAddReminderButton"
                x:Uid="AddAndEditReminderAddReminderButton"
                Icon="Accept"
                Label="reminder anlegen"
                Visibility="{Binding IsAddReminderDialog, Converter={StaticResource BooleanToVisibilityConverter}}"
                Command="{Binding CreateReminderCommand}" />
        </CommandBar>
    </Page.BottomAppBar>

    <Grid x:Name="LayoutRoot">

        <Grid.ChildrenTransitions>
            <TransitionCollection>
                <EntranceThemeTransition/>
            </TransitionCollection>
        </Grid.ChildrenTransitions>

        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>

        <!-- Titelbereich - Drawer -->
        <Grid Grid.Row="0" 
              Background="{Binding SelectedChannel, Converter={StaticResource ChannelToDrawerMenuBackgroundConverter}}"
              Style="{StaticResource DrawerMenuTitleBar}" >
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>

            <!-- Drawer Icon -->
            <Image x:Name="DrawerIcon" 
					   Grid.Column="0"
					   Style="{StaticResource DrawerIconStyle}"
					   Tapped="DrawerIcon_Tapped" />

            <!-- Drawer Text -->
            <TextBlock Grid.Column="1"
						   x:Uid="AddAndEditReminderAddReminderDrawerTitle"
						   Style="{StaticResource DrawerTextStyle}"
						   Text="{Binding SelectedChannel.Name, FallbackValue='Reminder', TargetNullValue=''}" />
        </Grid>



        <!--Inhalt der Seite und Inhalt des Drawer Menü-->
        <drawerLayout:DrawerLayout Grid.Row="1" x:Name="DrawerLayout">

            <!-- Inhalt der Seite -->
            <Grid x:Name="MainFragment" Background="{StaticResource MainFragmentBackgroundColor}">
                <!-- Der Inhalt der eigentlichen Seite kommt hier rein. -->
                
                <ScrollViewer>
                    <Grid x:Name="AddAndEditReminderMainGrid"
                          Style="{StaticResource PivotLikeGridStyle}">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                        
                        <!-- Überschrift -->
                        <TextBlock Grid.Row="0"
                                   x:Name="AddAndEditReminderAddReminderHeadline"
                                   x:Uid="AddAndEditReminderAddReminderHeadline"
                                   Style="{StaticResource UniversityNewsUlmPivotHeaderLikeText}"
                                   Visibility="{Binding IsAddReminderDialog, Converter={StaticResource BooleanToVisibilityConverter}}"
                                   Text="Reminder hinzufügen"
                                   />

                        <TextBlock Grid.Row="0"
                                   x:Name="AddAndEditReminderEditReminderHeadline"
                                   x:Uid="AddAndEditReminderEditReminderHeadline"
                                   Style="{StaticResource UniversityNewsUlmPivotHeaderLikeText}"
                                   Visibility="{Binding IsEditReminderDialog, Converter={StaticResource BooleanToVisibilityConverter}}"
                                   />

                        <!-- Beschreibung Dialog -->
                        <TextBlock Grid.Row="1"
                                   x:Name="AddAndEditReminderAddReminderDescription"
                                   x:Uid="AddAndEditReminderAddReminderDescription"
                                   Margin="0, 14.5, 0, 0"
                                   Style="{StaticResource UniversityNewsUlmStandardText}"
                                   Visibility="{Binding IsAddReminderDialog, Converter={StaticResource BooleanToVisibilityConverter}}"
                                   Text="Konfigurieren Sie einen Reminder, welcher Nachrichten in einem bestimmten Intervall in den Kanal schickt. Alle Felder sind Pflichtfelder" 
                                   />         
                        
                        <TextBlock Grid.Row="1"
                                   x:Name="AddAndEditReminderEditReminderDescription"
                                   x:Uid="AddAndEditReminderEditReminderDescription"
                                   Margin="0, 14.5, 0, 0"
                                   Style="{StaticResource UniversityNewsUlmStandardText}"
                                   Visibility="{Binding IsEditReminderDialog, Converter={StaticResource BooleanToVisibilityConverter}}"
                                   />         
                        
                        <!-- Block mit Start- und Ende-Datum. -->
                        <Grid
                            Grid.Row="2"
                            x:Name="AddAndEditReminderStartEndDateBlock">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="Auto" />
                            </Grid.RowDefinitions>
                            
                            <!-- Start Datum. -->
                            <DatePicker Grid.Row="0"
                                        x:Name="AddAndEditReminderStartDatePicker"
                                        x:Uid="AddAndEditReminderStartDatePicker"
                                        Header="Start-Datum"
                                        MonthFormat="{}{month.abbreviated}"
                                        Date="{Binding SelectedStartDate, Mode=TwoWay}" /> 
                            
                            <!-- Ende Datum -->
                            <DatePicker Grid.Row="1"
                                        x:Name="AddAndEditReminderEndDatePicker"
                                        x:Uid="AddAndEditReminderEndDatePicker"
                                        Header="Ende-Datum"
                                        MonthFormat="{}{month.abbreviated}"
                                        Date="{Binding SelectedEndDate, Mode=TwoWay}" /> 
                            
                            <!-- Validierungsfehler -->
                            <TextBlock Grid.Row="2"
                                       x:Name="AddAndEditReminderStartOrEndDateValidationError"
                                       Style="{StaticResource UniversityNewsUlmStandardErrorText}"
                                       Visibility="{Binding ElementName=AddAndEditReminderStartOrEndDateValidationError, Path=Text, Converter={StaticResource StringToVisibilityConverter}}"
                                       Text="{Binding ValidationMessages[StartAndEndDate], FallbackValue='', TargetNullValue='', Converter={StaticResource ValidationMessageOnLocalizedStringConverter}}"/>                          
                        </Grid>
                        
                        <!-- Uhrzeit -->
                        <TimePicker
                            Grid.Row="3"
                            x:Name="AddAndEditReminderTimePicker"
                            x:Uid="AddAndEditReminderTimePicker"
                            Header="Uhrzeit"
                            Time="{Binding SelectedTime, Mode=TwoWay}"
                            />

                        <Line 
                            Grid.Row="4"
                            Margin="0, 10, 0, 10"
                            Style="{StaticResource EnumerationOfPropertiesSeperatorStyle}" />

                        <!-- Interval Block -->
                        <Grid 
                            Grid.Row="5"
                            Margin="0, 5, 0, 5"
                            x:Name="AddAndEditReminderInvervalBlock">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="Auto" />
                            </Grid.RowDefinitions>
                            
                            <TextBlock 
                                x:Name="AddAndEditReminderIntervalBlockHeadline"
                                x:Uid="AddAndEditReminderIntervalBlockHeadline"
                                Style="{StaticResource IntervalBlockFontStyle}"
                                Text="Bitte Geben Sie das Intervall für den Reminder an:"
                                />
                            
                            <ComboBox Grid.Row="1"
                                      x:Name="AddAndEditReminderIntervalType"
                                      x:Uid="AddAndEditReminderIntervalType"
                                      SelectedIndex="{Binding SelectedIntervalTypeComboBoxIndex, Mode=TwoWay}"
                                      Header="Intervalltyp">
                                <ComboBoxItem 
                                    x:Name="AddAndEditReminderIntervalPickerItemDayly"
                                    x:Uid="AddAndEditReminderIntervalPickerItemDayly"
                                    Content="Täglich"
                                    IsSelected="{Binding IsDailyIntervalSelected, Mode=TwoWay}" />
                                <ComboBoxItem
                                    x:Name="AddAndEditReminderIntervalPickerItemWeekly"
                                    x:Uid="AddAndEditReminderIntervalPickerItemWeekly"
                                    Content="Wöchentlich"
                                    IsSelected="{Binding IsWeeklyIntervalSelected, Mode=TwoWay}" />
                                <ComboBoxItem
                                    x:Name="AddAndEditReminderIntervalPickerItemOnce"
                                    x:Uid="AddAndEditReminderIntervalPickerItemOnce"
                                    Content="Einmalig"
                                    IsSelected="{Binding IsIntervalOneTimeSelected, Mode=TwoWay}" />
                            </ComboBox>

                            <Grid Grid.Row="2"
                                Visibility="{Binding IsDailyIntervalSelected, Converter={StaticResource BooleanToVisibilityConverter}}">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="2*" />
                                    <ColumnDefinition Width="*" />
                                </Grid.ColumnDefinitions>
                                <TextBlock
                                    Grid.Column="0"
                                    x:Name="AddAndEditReminderIntervalPickerDailyDescription"
                                    x:Uid="AddAndEditReminderIntervalPickerDailyDescription"
                                    VerticalAlignment="Center"
                                    Style="{StaticResource IntervalBlockFontStyle}"
                                    Text="Intervall in Tagen: " />
                                
                                <ComboBox 
                                    Grid.Column="1"
                                    HorizontalContentAlignment="Stretch"
                                    VerticalAlignment="Center"
                                    MinWidth="70px"
                                    SelectedIndex="{Binding SelectedIntervalInDays, Mode=TwoWay}">
                                    <ComboBoxItem Content="0" Visibility="Collapsed" IsEnabled="False"/>
                                    <ComboBoxItem Content="1" />
                                    <ComboBoxItem Content="2" />
                                    <ComboBoxItem Content="3" />
                                    <ComboBoxItem Content="4" />
                                    <ComboBoxItem Content="5" />
                                    <ComboBoxItem Content="6" />
                                    <ComboBoxItem Content="7" />
                                    <ComboBoxItem Content="8" />
                                    <ComboBoxItem Content="9" />
                                    <ComboBoxItem Content="10" />
                                    <ComboBoxItem Content="11" />
                                    <ComboBoxItem Content="12" />
                                    <ComboBoxItem Content="13" />
                                    <ComboBoxItem Content="14" />
                                    <ComboBoxItem Content="15" />
                                    <ComboBoxItem Content="16" />
                                    <ComboBoxItem Content="17" />
                                    <ComboBoxItem Content="18" />
                                    <ComboBoxItem Content="19" />
                                    <ComboBoxItem Content="20" />
                                    <ComboBoxItem Content="21" />
                                    <ComboBoxItem Content="22" />
                                    <ComboBoxItem Content="23" />
                                    <ComboBoxItem Content="24" />
                                    <ComboBoxItem Content="25" />
                                    <ComboBoxItem Content="26" />
                                    <ComboBoxItem Content="27" />
                                    <ComboBoxItem Content="28" />
                                </ComboBox>
                            </Grid>

                            <Grid Grid.Row="2"
                                Visibility="{Binding IsWeeklyIntervalSelected, Converter={StaticResource BooleanToVisibilityConverter}}">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="2*" />
                                    <ColumnDefinition Width="*" />
                                </Grid.ColumnDefinitions>
                                <TextBlock
                                    Grid.Column="0"
                                    x:Name="AddAndEditReminderIntervalPickerWeeklyDescription"
                                    x:Uid="AddAndEditReminderIntervalPickerWeeklyDescription"
                                    VerticalAlignment="Center"
                                    Style="{StaticResource IntervalBlockFontStyle}"
                                    Text="" />

                                <ComboBox 
                                    Grid.Column="1"
                                    HorizontalContentAlignment="Stretch"
                                    VerticalAlignment="Center"
                                    MinWidth="70px"
                                    SelectedIndex="{Binding SelectedIntervalInWeeks, Mode=TwoWay}">
                                    <ComboBoxItem Content="0" Visibility="Collapsed" IsEnabled="False"/>
                                    <ComboBoxItem Content="1" />
                                    <ComboBoxItem Content="2" />
                                    <ComboBoxItem Content="3" />
                                    <ComboBoxItem Content="4" />
                                </ComboBox>
                            </Grid>

                            <Grid Grid.Row="2"
                                Visibility="{Binding IsIntervalOneTimeSelected, Converter={StaticResource BooleanToVisibilityConverter}}">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="2*" />
                                    <ColumnDefinition Width="*" />
                                </Grid.ColumnDefinitions>
                                <TextBlock
                                    Grid.Column="0"
                                    x:Name="AddAndEditReminderIntervalPickerOneTimeDescription"
                                    x:Uid="AddAndEditReminderIntervalPickerOneTimeDescription"
                                    VerticalAlignment="Center"
                                    Style="{StaticResource IntervalBlockFontStyle}"
                                    Text="" />

                                <ComboBox 
                                    Grid.Column="1"
                                    HorizontalContentAlignment="Stretch"
                                    VerticalAlignment="Center"
                                    IsEnabled="False"
                                    MinWidth="70px"
                                    SelectedIndex="1">
                                    <ComboBoxItem Content="0" Visibility="Collapsed" IsEnabled="False"/>
                                    <ComboBoxItem Content="1" />
                                </ComboBox>
                            </Grid>

                            <!-- Beschreibung der Auswahl. -->
                            <TextBlock
                                Grid.Row="3"
                                x:Name="AddAndEditReminderDailyIntervalSelectionDescription"
                                x:Uid="AddAndEditReminderDailyIntervalSelectionDescription"
                                Style="{StaticResource IntervalBlockFontStyle}"
                                Visibility="{Binding IsDailyIntervalSelected, Converter={StaticResource BooleanToVisibilityConverter}}"
                                >
                                <Run x:Uid="AddAndEditReminderDailyIntervalSelectionDesc1" />
                                <Run Text="{Binding SelectedIntervalInDays}" />
                                <Run x:Uid="AddAndEditReminderDailyIntervalSelectionDesc2" />
                            </TextBlock>

                            <TextBlock
                                Grid.Row="3"
                                x:Name="AddAndEditReminderWeeklyIntervalSelectionDescription"
                                x:Uid="AddAndEditReminderWeeklyIntervalSelectionDescription"
                                Style="{StaticResource IntervalBlockFontStyle}"
                                Visibility="{Binding IsWeeklyIntervalSelected, Converter={StaticResource BooleanToVisibilityConverter}}"
                                >
                                <Run x:Uid="AddAndEditReminderWeeklyIntervalSelectionDesc1" />
                                <Run Text="{Binding SelectedIntervalInWeeks}" />
                                <Run x:Uid="AddAndEditReminderWeeklyIntervalSelectionDesc2" />
                            </TextBlock>

                            <TextBlock
                                Grid.Row="3"
                                x:Name="AddAndEditReminderOneTimeIntervalSelectionDescription"
                                x:Uid="AddAndEditReminderOneTimeIntervalSelectionDescription"
                                Style="{StaticResource IntervalBlockFontStyle}"
                                Visibility="{Binding IsIntervalOneTimeSelected, Converter={StaticResource BooleanToVisibilityConverter}}"
                                />

                            <!-- Validierungsfehler -->
                            <TextBlock Grid.Row="4"
                                       Margin="0, 5, 0, 0"
                                       x:Name="AddAndEditReminderIntervalValidationError"
                                       Style="{StaticResource UniversityNewsUlmStandardErrorText}"
                                       Visibility="{Binding ElementName=AddAndEditReminderIntervalValidationError, Path=Text, Converter={StaticResource StringToVisibilityConverter}}"
                                       Text="{Binding ValidationMessages[Interval], FallbackValue='', TargetNullValue='', Converter={StaticResource ValidationMessageOnLocalizedStringConverter}}"/>
                            
                            <!-- Aussetzen des Reminders und nächstes Reminder-Datum. -->
                            <Grid
                                Grid.Row="5">
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto" />
                                    <RowDefinition Height="Auto" />
                                </Grid.RowDefinitions>
                                
                                <CheckBox Grid.Row="0"
                                          x:Name="AddAndEditReminderSkipNextDateCheckBox"
                                          x:Uid="AddAndEditReminderSkipNextDateCheckBox"
                                          IsChecked="{Binding SkipNextReminderDate, Mode=TwoWay}"
                                          Content="Überspringe nächsten Termin"/>
                                
                                <Grid Grid.Row="1">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="Auto" />
                                        <ColumnDefinition Width="*" />
                                    </Grid.ColumnDefinitions>
                                    
                                    <TextBlock
                                        Grid.Column="0"
                                        x:Name="AddAndEditReminderNextReminderDateText"
                                        x:Uid="AddAndEditReminderNextReminderDateText"
                                        Style="{StaticResource IntervalBlockFontStyle}"
                                        />

                                    <TextBlock
                                        Grid.Column="1"
                                        x:Name="AddAndEditReminderNextReminderDate"
                                        x:Uid="AddAndEditReminderNextReminderDate"
                                        Visibility="{Binding IsReminderExpired, Converter={StaticResource BooleanToVisibilityConverter}, ConverterParameter='inverse'}"
                                        Style="{StaticResource IntervalBlockFontStyle}"
                                        Text="{Binding NextReminderDate, Converter={StaticResource ReminderDateTimeToStringConverter}}"
                                        />
                                    
                                    <!-- Einblenden von Text, wenn Reminder abgelaufen ist.-->
                                    <TextBlock
                                        Grid.Column="1"
                                        x:Name="AddAndEditReminderReminderIsExpiredText"
                                        x:Uid="AddAndEditReminderReminderIsExpiredText"
                                        Visibility="{Binding IsReminderExpired, Converter={StaticResource BooleanToVisibilityConverter}}"
                                        Style="{StaticResource IntervalBlockFontStyle}"
                                        />
                                </Grid>
                            </Grid>
                            
                        </Grid>

                        <Line 
                            Grid.Row="6"
                            Margin="0, 10, 0, 10"
                            Style="{StaticResource EnumerationOfPropertiesSeperatorStyle}" />

                        <!-- Title der Announcement Nachricht, die vom Reminder gefeuert wird.-->
                        <Grid Grid.Row="7">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="Auto" />
                            </Grid.RowDefinitions>

                            <TextBox
                                Grid.Row="0"
                                x:Name="AddAndEditReminderTitleTextBox"
                                x:Uid="AddAndEditReminderTitleTextBox"
                                InputScope="AlphanumericFullWidth"
                                Header="Titel"
                                Text="{Binding Title, Mode=TwoWay}"/>

                            <!-- Validierungsfehler -->
                            <TextBlock Grid.Row="1"
                                       x:Name="AddAndEditReminderTitleValidationError"
                                       Style="{StaticResource UniversityNewsUlmStandardErrorText}"
                                       Visibility="{Binding ElementName=AddAndEditReminderTitleValidationError, Path=Text, Converter={StaticResource StringToVisibilityConverter}}"
                                       Text="{Binding ValidationMessages[Title], FallbackValue='', TargetNullValue='', Converter={StaticResource ValidationMessageOnLocalizedStringConverter}}"/>

                        </Grid>

                        <!-- Nachrichtenpriorität -->
                        <ComboBox
                            Grid.Row="8"
                            x:Name="AddAndEditReminderPriorityComboBox"
                            x:Uid="AddAndEditReminderPriorityComboBox" 
                            Header="Priorität"
                            SelectedIndex="0">
                            <ComboBoxItem x:Uid="AddAndEditReminderPriorityNormal"
                                          Content="Normal"
                                          IsSelected="{Binding IsPriorityNormalSelcted, Mode=TwoWay}" />
                            <ComboBoxItem x:Uid="AddAndEditReminderPriorityHigh"
                                          Content="Hoch"
                                          IsSelected="{Binding IsPriorityHighSelected, Mode=TwoWay}" />
                        </ComboBox>
                        
                        <!-- Inhalt der Announcement Nachricht, die vom Reminder gefeuert wird. -->
                        <Grid Grid.Row="9">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="Auto" />
                            </Grid.RowDefinitions>

                            <TextBox
                                Grid.Row="0"
                                x:Name="AddAndEditReminderContentTextBox"
                                x:Uid="AddAndEditReminderContentTextBox"
                                InputScope="AlphanumericFullWidth"
                                AcceptsReturn="True"
                                MinHeight="150px"
                                TextWrapping="Wrap"
                                Header="Text"
                                Text="{Binding Text, Mode=TwoWay}"/>

                            <!-- Validierungsfehler -->
                            <TextBlock Grid.Row="1"
                                       x:Name="AddAndEditReminderTextValidationError"
                                       Style="{StaticResource UniversityNewsUlmStandardErrorText}"
                                       Visibility="{Binding ElementName=AddAndEditReminderTextValidationError, Path=Text, Converter={StaticResource StringToVisibilityConverter}}"
                                       Text="{Binding ValidationMessages[Text], FallbackValue='', TargetNullValue='', Converter={StaticResource ValidationMessageOnLocalizedStringConverter}}"/>

                        </Grid>
                                               
                    </Grid>
                </ScrollViewer>
            </Grid>

            
            <!--Inhalt des Drawer Menüs-->
            <Grid x:Name="ListFragment" Background="{StaticResource DrawerMenuContentPanelBackgroundColor}">
                 <!--Flyout für Warnung "Dialog verlassen."--> 
                <FlyoutBase.AttachedFlyout>
                    <Flyout                    
                        FlyoutPresenterStyle="{StaticResource ResourceKey=FlyoutStyle}"
                            common:FlyoutHelper.IsOpen="{Binding IsFlyoutOpen, Mode=TwoWay}"
                            common:FlyoutHelper.Parent="{Binding ElementName=ListFragment}">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="Auto" />
                            </Grid.RowDefinitions>
                            <TextBlock
                                Grid.Row="0"
                                x:Uid="FlyoutWarningDialogCloseDescription"
                                Text="Achtung! Wenn Sie den Dialog verlassen werden die von Ihnen eingetragenen Daten gelöscht."
                                Style="{StaticResource TextInFlyoutsStyle}"/>
                            <Button
                                Grid.Row="1"
                                x:Uid="FlyoutWariningDialogCloseButton"
                                Content="Dialog verlassen"
                                Command="{Binding PerformOriginalDrawerMenuActionCommand}"
                                Margin="0,0,15,15"
                                HorizontalAlignment="Right" />
                        </Grid>
                    </Flyout>
                </FlyoutBase.AttachedFlyout>

                <ListView     
                    x:Name="ListMenuItems"
					ItemTemplate="{StaticResource DrawerMenuEntryDataTemplate}"
					IsItemClickEnabled="True">
                    <ListView.ItemContainerStyle>
                        <Style TargetType="ListViewItem">
                            <Setter Property="HorizontalContentAlignment" Value="Stretch" />
                        </Style>
                    </ListView.ItemContainerStyle>

                    <!--Bind auf Command mittels Behaviour. Öffne das Flyout beim Klick auf das Command. Übergibt den geklickten DrawerMenuEntry.--> 
                    <i:Interaction.Behaviors>
                        <core:EventTriggerBehavior EventName="ItemClick">
                            <core:InvokeCommandAction Command="{Binding ShowWarningFlyout}"
                                                      InputConverter="{StaticResource ItemClickedConverter}" />
                        </core:EventTriggerBehavior>
                    </i:Interaction.Behaviors>
                </ListView>
            </Grid>

        </drawerLayout:DrawerLayout>
    </Grid>
</Page>
